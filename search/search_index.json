{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apfel","text":"<p>\ud83c\udf4e <code>apfel</code> stands for A Personal Functional Extension Library, which provides a set of basic utilities designed for academic experiments.</p> <p>Apfel is the Deutsch word for apple.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Originally, the word 'functional' comes from the functional programming paradigm. However, Python is not inherently a functional programming language, and it is functional incomplete in many aspects.</p> <p>To fulfill my personal needs of writing elegant (and possibly efficient) code for  academic experiments evolving in an agile way, and to avoid pulling in less-maintained or less-documented third-party libraries, a personal toolkit is a better choice.</p> <p>It provides common helper functions, data types and sublanguages that aim to counter the missing features and design flaws of Python language itself. Heavy use of meta-programming, type hints and functional programming techniques are expected.</p>"},{"location":"#design-goals","title":"Design Goals","text":"<ul> <li> <p>Unpythonic.   Use best practices and API naming conventions from other languages,   especially  Rust,    Haskell   and  Julia to mitigate Python's limitations.</p> </li> <li> <p>Type safe.   Add expressive and sound type hints whenever possible.</p> </li> <li> <p>Low cost abstraction.   Try to use the most efficient underlying implementation.</p> </li> <li> <p>Minimal dependencies.   The library is kept (almost) self-contained, except those listed inside dependencies.</p> </li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Warning</p> <p>This library is mainly personal and still in a very early stage.  We'll try to follow Semantic Versioning, but breaking changes should be expected.  If you are interested in using this library, please make sure to lock the version.</p>"},{"location":"install/#dependencies","title":"Dependencies","text":"<p>Currently, <code>apfel</code> requires Python 3.11 or later.</p> <p>The following dependencies are required:</p> <ul> <li><code>typing-extensions</code></li> </ul>"},{"location":"install/#installation_1","title":"Installation","text":"<p>This library is not published to PyPI. You should install it directly from the GitHub repository. Using <code>pyprojects.toml</code> and locking to a Git reference (e.g. a tag) is recommended.</p>"},{"location":"install/#in-pyprojectstoml","title":"In <code>pyprojects.toml</code>","text":"<pre><code>[package]\ndependencies = [\n    \"apfel @ git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\"\n]\n</code></pre>"},{"location":"install/#in-pyprojectstoml-with-poetry","title":"In <code>pyprojects.toml</code> with Poetry","text":"<pre><code>[tool.poetry.dependencies]\napfel = { git = \"https://github.com/Yixuan-Wang/apfel.git\", tag = \"v{VERSION}\" }\n</code></pre>"},{"location":"install/#in-requirementstxt","title":"In <code>requirements.txt</code>","text":"<pre><code>apfel @ git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\n</code></pre>"},{"location":"install/#direct-installation","title":"Direct Installation","text":"<pre><code>pip install git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\n</code></pre>"},{"location":"core/function-object/","title":"Function Object","text":"<p>Function Objects are objects that implement the function call operator. This module provides <code>FunctionObject</code>. These are functions enhanced with methods and operator overloads, and can be called and passed around just like normal  Python functions, or further combined and mutated as the functions in  Haskell.</p> <p>Warning</p> <p>Function objects come with runtime costs. Albeit negligble most of the time, the cost could accumulate on critical paths.</p>"},{"location":"core/function-object/#decorators","title":"Decorators","text":""},{"location":"core/function-object/#func","title":"<code>@func</code>","text":"<pre><code>def func[F: Callable](f: F) -&gt; F\n</code></pre> <p>Turns a callable into <code>FunctionObject</code> yet keeps its original type hints.</p> <p>Example</p> <pre><code>@func\ndef f(a: int) -&gt; int:\n    return f + 1\n\nf | 1\n# 2\n</code></pre> <p>Note</p> <p>As a callable, <code>FunctionObject</code> has less static typing support. <code>@func</code> erases type hints of <code>FunctionObject</code> while keeping the runtime type. If you want to retain the type hints, directly use <code>FunctionObject</code>'s constructor, or use <code>reveal_func</code> on an object with runtime type <code>FunctionObject</code>.</p>"},{"location":"core/function-object/#functionobject","title":"<code>FunctionObject</code>","text":"<pre><code>class FunctionObject\n</code></pre> <p>A wrapper for callable that provides additional methods and operator overloads.</p>"},{"location":"core/function-object/#_1","title":"<code>|</code>","text":"<pre><code>def |[\n    T, R,\n    Self: Callable[[T], R],\n](\n    self,\n    rhs: T,\n) -&gt; R\n</code></pre> <p>Function application operator <code>|</code> for <code>FunctionObject</code>s.</p> <p><code>f | x</code> is equivalent to <code>f(x)</code>.</p> <p>Example</p> <pre><code>@func\ndef f(x):\n    return x + 1\n\nf | 1\n# 2\n</code></pre>"},{"location":"core/function-object/#_","title":"<code>_&amp;</code>","text":"<p><pre><code>def _&amp;[\n    T, R,\n    Self: Callable[[T], R],\n](\n    self,\n    lhs: T,\n) -&gt; R\n</code></pre> Reverse function application operator <code>&amp;</code> for <code>FunctionObject</code>s.</p> <p><code>x &amp; f</code> is equivalent to <code>f(x)</code>, if <code>&amp;</code> operator (left, <code>__and__</code>) is not overloaded by <code>x</code>'s type.</p> <p>Warning</p> <p><code>np.array</code> and array-like types are common overloaders of <code>&amp;</code>, therefore this operator cannot be used with them.</p> <p>Example</p> <pre><code>@func\ndef f(x):\n    return x + 1\n\n1 &amp; f\n# 2\n</code></pre>"},{"location":"core/function-object/#_2","title":"<code>@</code>","text":"<pre><code>def @[F: Callable](self, rhs: F) -&gt; ...\n</code></pre> <p>'curry/call' operator <code>@</code> for <code>FunctionObject</code>s. This operator mimics  Haskell's calling behavior.</p> <p>Its exact behavior depends on the wrapped function's positional-only and positional-or-keyword parameters.</p> <ol> <li>If no such parameters, the right operand will be ignored and the function fired with no argument;</li> <li>If there's exactly one parameter, the function will be called on the right operand;</li> <li>Otherwise there's more than one parameter, the function will be curried first before being called on the right operand. This will return a new <code>FunctionObject</code>.</li> </ol>"},{"location":"core/function-object/#_3","title":"<code>**</code>","text":"<pre><code>def **[F: Callable](self, rhs: F) -&gt; FunctionObject\n</code></pre> <p>Functional composition operator <code>**</code> for <code>FunctionObject</code>s.</p> <p><code>f ** g</code> is mathematically similar to $f \\circ g$.</p> <p>Example</p> <pre><code>@func\ndef f(x):\n    return x + 1\n\n@func\ndef g(x):\n    return x * 2\n\nh = f ** g\nh(1)\n# 3\n</code></pre>"},{"location":"core/function-object/#_4","title":"<code>%</code>","text":"<pre><code>def %(self, rhs: tuple | dict) -&gt; FunctionObject raise TypeError\n</code></pre> <p>Bind operator <code>%</code> for <code>FunctionObject</code>s to create partial functions.</p> <p><code>x % (a, b, c)</code> binds positional arguments. <code>x % { \"a\": 1, \"b\": 2 }</code> binds keyword arguments.</p> <p>Note</p> <p>Use <code>bind</code> method for all usage <code>functools.partial</code> supported.</p> <p>Example</p> <pre><code>@func\ndef f(a, b, c):\n    return a + b + c\n\ng = f % (1, 2)\ng(3)\n# 6\n</code></pre>"},{"location":"core/function-object/#bind","title":"<code>bind</code>","text":"<pre><code>def bind(self, *args, **kwargs) -&gt; FunctionObject\n</code></pre> <p>Bind extra arguments to a <code>FunctionObject</code>. The returned function will be wrapped in another <code>FuncObject</code>.</p>"},{"location":"core/function-object/#module-functions","title":"Module Functions","text":""},{"location":"core/function-object/#reveal_func","title":"<code>reveal_func</code>","text":"<pre><code>def reveal_func(func: Any) -&gt; FunctionObject raise TypeError\n</code></pre> <p>Cast a <code>FunctionObject</code> to <code>FunctionObject</code> type.</p> <p>Exception</p> <p>This function performs runtime check and raises <code>TypeError</code> if the input is not a <code>FunctionObject</code>.</p>"}]}