{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"install/","title":"Installation","text":"<p>Warning</p> <p>This library is mainly personal and still in a very early stage.  We'll try to follow Semantic Versioning, but breaking changes should be expected.  If you are interested in using this library, please make sure to lock the version.</p>"},{"location":"install/#installation_1","title":"Installation","text":"<p>This library is not published to PyPI. You should install it directly from the GitHub repository. Using <code>pyprojects.toml</code> and locking to a Git reference (e.g. a tag) is recommended.</p>"},{"location":"install/#in-pyprojectstoml","title":"In <code>pyprojects.toml</code>","text":"<pre><code>[package]\ndependencies = [\n    \"apfel @ git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\"\n]\n</code></pre>"},{"location":"install/#in-pyprojectstoml-with-poetry","title":"In <code>pyprojects.toml</code> with Poetry","text":"<pre><code>[tool.poetry.dependencies]\napfel = { git = \"https://github.com/Yixuan-Wang/apfel.git\", tag = \"v{VERSION}\" }\n</code></pre>"},{"location":"install/#in-requirementstxt","title":"In <code>requirements.txt</code>","text":"<pre><code>apfel @ git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\n</code></pre>"},{"location":"install/#direct-installation","title":"Direct Installation","text":"<pre><code>pip install git+https://github.com/Yixuan-Wang/apfel.git@v{VERSION}\n</code></pre>"},{"location":"core/function-object/","title":"Function Object","text":"<p>Function Objects are functions enhanced with methods and operator overloads. <code>FunctionObject</code>s can be called and passed around just like normal  Python functions, or further combined and mutated as the functions in  Haskell.</p> <p>Warning</p> <p>Function objects come with runtime costs. Albeit negligble most of the time, the cost could accumulate on critical paths.</p>"},{"location":"core/function-object/#decorators","title":"Decorators","text":""},{"location":"core/function-object/#func","title":"<code>@func</code>","text":"<p>Turns a callable into <code>FunctionObject</code> yet keeps its original type hints.</p> <p>Example</p> <pre><code>@func\ndef f(a: int) -&gt; int:\n    return f + 1\n\nf | 1 # 2\n</code></pre> <p>Note</p> <p>As a callable, <code>FunctionObject</code> has less static typing support. <code>@func</code> erases type hints of <code>FunctionObject</code> while keeping the runtime type. If you want to retain the type hints, directly use <code>FunctionObject</code>'s constructor, or use <code>reveal_func</code> on an object with runtime type <code>FunctionObject</code>.</p>"},{"location":"core/function-object/#functions","title":"Functions","text":""},{"location":"core/function-object/#reveal_func","title":"<code>reveal_func</code>","text":"<p>Function Objects are functions enhanced with methods and operator overloads. <code>FunctionObject</code>s can be called and passed around just like normal  Python functions, or further combined and mutated as the functions in  Haskell.</p> <p>Warning</p> <p>Function objects come with runtime costs. Albeit negligble most of the time, the cost could accumulate on critical paths.</p>"},{"location":"core/function-object/#apfel.core.function_object.func","title":"func  <code>module-attribute</code>","text":"<pre><code>func = FunctionObject(FunctionObject)\n</code></pre> <p>Turns a callable into <code>FunctionObject</code> yet keeps its original type hints.</p> <p>Example</p> <pre><code>@func\ndef f(a: int) -&gt; int:\n    return f + 1\n\nf | 1 # 2\n</code></pre> <p>Note</p> <p>As a callable, <code>FunctionObject</code> has less static typing support. <code>@func</code> erases type hints of <code>FunctionObject</code> while keeping the runtime type. If you want to retain the type hints, directly use <code>FunctionObject</code>'s constructor, or use <code>reveal_func</code> on an object with runtime type <code>FunctionObject</code>.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject","title":"FunctionObject","text":""},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.__matmul__","title":"__matmul__","text":"<pre><code>__matmul__(rhs)\n</code></pre> <p>'Curry/call' operator <code>@</code> for <code>FunctionObject</code>s.</p> <p>Its exact behavior depends on the function's positional-only and positional-or-keyword parameters.</p> <ol> <li>If no such parameters, the right operand will be ignored and the function fired with no argument;</li> <li>If there's exactly one parameter, the function will be called on the right operand;</li> <li>Otherwise there's more than one parameter, the function will be Curried first before being called on the right operand.</li> </ol>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.__mod__","title":"__mod__","text":"<pre><code>__mod__(rhs)\n</code></pre> <p>Bind operator <code>%</code> for <code>FunctionObject</code>s to create partial functions.</p> <p><code>x % (a, b, c)</code> binds positional arguments. <code>x % {\"a\": 1, \"b\": 2}</code> binds keyword arguments.</p> <p>Note</p> <p>Use <code>bind</code> method for all usage <code>functools.partial</code> supported.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.__or__","title":"__or__","text":"<pre><code>__or__(rhs)\n</code></pre> <p>Function application operator <code>|</code> for <code>FunctionObject</code>s.</p> <p><code>f | x</code> is equivalent to <code>f(x)</code>.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.__pow__","title":"__pow__","text":"<pre><code>__pow__(rhs)\n</code></pre> <p>Functional composition operator <code>**</code> for <code>FunctionObject</code>s.</p> <p><code>f ** g</code> is mathematically similar to $f \\circ g$.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.__rand__","title":"__rand__","text":"<pre><code>__rand__(lhs)\n</code></pre> <p>Reverse function application operator <code>&amp;</code> for <code>FunctionObject</code>s.</p> <p><code>x &amp; f</code> is equivalent to <code>f(x)</code>, if <code>&amp;</code> operator (left, <code>__and__</code>) is not overloaded by <code>x</code>'s type.</p> <p>Warning</p> <p><code>np.array</code> and array-like types are common overloaders of <code>&amp;</code>, therefore this operator cannot be used with them.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.bind","title":"bind","text":"<pre><code>bind(*args, **kwargs)\n</code></pre> <p>Bind extra arguments to a <code>FunctionObject</code>. The returned function will be wrapped in another <code>FuncObject</code>.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.reveal","title":"reveal","text":"<pre><code>reveal()\n</code></pre> <p>Cast a <code>FunctionObject</code> to its original callable.</p>"},{"location":"core/function-object/#apfel.core.function_object.FunctionObject.unwrap","title":"unwrap","text":"<pre><code>unwrap()\n</code></pre> <p>Cast a <code>FunctionObject</code> to its original callable.</p>"},{"location":"core/function-object/#apfel.core.function_object.reveal_func","title":"reveal_func","text":"<pre><code>reveal_func(f)\n</code></pre> <p>Cast a <code>FunctionObject</code> hidden as built-in function back to a <code>FunctionObject</code>.</p>"},{"location":"core/function-object/#data-structures","title":"Data Structures","text":""},{"location":"core/function-object/#functionobject","title":"<code>FunctionObject</code>","text":""},{"location":"core/function-object/#_1","title":"Function Object","text":""}]}